// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/b/RAM16K.hdl

/**
 * Memory of 16K registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM16K {
    IN in[16], load, address[14];
    OUT out[16];

    PARTS:
    DMux4Way(in = in[0], sel = address[0..1], a = a0, b = b0, c = c0, d = d0);
    DMux4Way(in = in[1], sel = address[0..1], a = a1, b = b1, c = c1, d = d1);
    DMux4Way(in = in[2], sel = address[0..1], a = a2, b = b2, c = c2, d = d2);
    DMux4Way(in = in[3], sel = address[0..1], a = a3, b = b3, c = c3, d = d3);
    DMux4Way(in = in[4], sel = address[0..1], a = a4, b = b4, c = c4, d = d4);
    DMux4Way(in = in[5], sel = address[0..1], a = a5, b = b5, c = c5, d = d5);
    DMux4Way(in = in[6], sel = address[0..1], a = a6, b = b6, c = c6, d = d6);
    DMux4Way(in = in[7], sel = address[0..1], a = a7, b = b7, c = c7, d = d7);
    DMux4Way(in = in[8], sel = address[0..1], a = a8, b = b8, c = c8, d = d8);
    DMux4Way(in = in[9], sel = address[0..1], a = a9, b = b9, c = c9, d = d9);
    DMux4Way(in = in[10], sel = address[0..1], a = a10, b = b10, c = c10, d = d10);
    DMux4Way(in = in[11], sel = address[0..1], a = a11, b = b11, c = c11, d = d11);
    DMux4Way(in = in[12], sel = address[0..1], a = a12, b = b12, c = c12, d = d12);
    DMux4Way(in = in[13], sel = address[0..1], a = a13, b = b13, c = c13, d = d13);
    DMux4Way(in = in[14], sel = address[0..1], a = a14, b = b14, c = c14, d = d14);
    DMux4Way(in = in[15], sel = address[0..1], a = a15, b = b15, c = c15, d = d15);

    DMux4Way(in = load, sel = address[0..1], a = aLoad, b = bLoad, c = cLoad, d = dLoad);

    RAM4K(in[0] = a0, in[1] = a1, in[2] = a2, in[3] = a3, in[4] = a4, in[5] = a5, in[6] = a6, in[7] = a7, in[8] = a8, in[9] = a9, in[10] = a10, in[11] = a11, in[12] = a12, in[13] = a13, in[14] = a14, in[15] = a15, load = aLoad, address = address[2..13], out = aOut);
    RAM4K(in[0] = b0, in[1] = b1, in[2] = b2, in[3] = b3, in[4] = b4, in[5] = b5, in[6] = b6, in[7] = b7, in[8] = b8, in[9] = b9, in[10] = b10, in[11] = b11, in[12] = b12, in[13] = b13, in[14] = b14, in[15] = b15, load = bLoad, address = address[2..13], out = bOut);
    RAM4K(in[0] = c0, in[1] = c1, in[2] = c2, in[3] = c3, in[4] = c4, in[5] = c5, in[6] = c6, in[7] = c7, in[8] = c8, in[9] = c9, in[10] = c10, in[11] = c11, in[12] = c12, in[13] = c13, in[14] = c14, in[15] = c15, load = cLoad, address = address[2..13], out = cOut);
    RAM4K(in[0] = d0, in[1] = d1, in[2] = d2, in[3] = d3, in[4] = d4, in[5] = d5, in[6] = d6, in[7] = d7, in[8] = d8, in[9] = d9, in[10] = d10, in[11] = d11, in[12] = d12, in[13] = d13, in[14] = d14, in[15] = d15, load = dLoad, address = address[2..13], out = dOut);

    Mux4Way16(a = aOut, b = bOut, c = cOut, d = dOut, sel = address[0..1], out = out);
}
